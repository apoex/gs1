#!/usr/bin/env ruby

require 'bundler/setup'
require 'gs1/syntax_dictionary/parser'

module GS1
  # Generates AI classes based on the GS1 syntax dictionary.
  #
  # The input is the syntax dictionary located in the `gs1-syntax-dictionary.txt`
  # file. The output is the `lib/gs1/generated_ai_classes.rb` file.
  class AIClassesGenerator
    def generate
      data = File.read('gs1-syntax-dictionary.txt')
      entry_data = GS1::SyntaxDictionary::Parser
                   .new(data)
                   .parse
                   .map { generate_single_entry(_1) }
                   .join("\n\n")

      File.write('lib/gs1/generated_ai_classes.rb', template(entry_data))
    end

    private

    module StringHelpers
      refine String do
        def blank? = empty? || /\A[[:space:]]*\z/.match?(self)

        def indent(amount, indent_string: nil, indent_empty_lines: false)
          indent_string = indent_string || self[/^[ \t]/] || ' '
          re = indent_empty_lines ? /^/ : /^(?!$)/
          gsub(re, indent_string * amount)
        end
      end
    end

    using StringHelpers

    def template(entry_data)
      <<~RUBY
        # This file is generated by the `./bin/generate_ai_classes` script.
        # Do not edit this file manually. See readme for more information.
        module GS1
          module GeneratedAIClasses
            def self.ai_classes
        #{entry_data}
            end
          end
        end
      RUBY
    end

    def generate_single_entry(entry)
      allowed = format_allowed(entry)
      separator = self.separator(entry)
      name = self.name(entry)

      format_entry <<~RUBY
        Class.new(Record) do
          define :length, allowed: #{allowed}
          #{separator}
          def self.name = '#{name}'
          def self.ai = '#{entry.ai}'
          def self.generated = true
        end
      RUBY
    end

    def format_entry(string)
      string
        .strip
        .split("\n")
        .reject(&:blank?)
        .join("\n")
        .indent(6)
    end

    def format_allowed(entry)
      entry.length.count == 1 ? entry.length.begin.to_s : entry.length.to_s
    end

    def separator(entry)
      entry.separator_required ? "define :separator\n" : ''
    end

    def name(entry) = entry.title.gsub(/[^\w]+/, '_')
  end
end

GS1::AIClassesGenerator.new.generate
